https://www.w3schools.com/java

OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or methods that perform operations on the data,
 while object-oriented programming is about creating objects that contain both data and methods.

Object-oriented programming has several advantages over procedural programming:

-->OOP is faster and easier to execute
-->OOP provides a clear structure for the programs
-->OOP helps to keep the Java code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
-->OOP makes it possible to create full reusable applications with less code and shorter development time
Tip: The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code.
You should extract out the codes that are common for the application,
and place them at a single place and reuse them instead of repeating it.



Java Constructors
A constructor in Java is a special method that is used to initialize objects. The constructor
is called when an object of a class is created.
It can be used to set initial values for object attributes:


Note that the constructor name must match the class name, and it cannot have a return type (like void).

Also note that the constructor is called when the object is created.

All classes have constructors by default: if you do not create a class constructor yourself,
Java creates one for you. However, then you are not able to set initial values for object attributes.


Constructor Parameters
Constructors can also take parameters, which is used to initialize attributes.


Modifiers:
https://www.w3schools.com/java/java_modifiers.asp


Access Modifiers
For classes, you can use either public or default:

Modifier    |	Description
public	    |The class is accessible by any other class
default	    |The class is only accessible by classes in the same package. This is used when you don't specify a modifier. You will learn more about packages in the Packages chapter	
For attributes, methods and constructors, you can use the one of the following:
------------------------------------------------------------------
Modifier    |	Description
public	    | The code is accessible for all classes
private	    | The code is only accessible within the declared class
default	    | The code is only accessible in the same package.
This is used when you don't specify a modifier.
protected	| The code is accessible in the same package and subclasses.
========================================================================

Non-Access Modifiers
For classes, you can use either final or abstract:

Modifier    |	Description
final	    |The class cannot be inherited by other classes (You will learn more about inheritance in the Inheritance chapter)	
abstract    |	The class cannot be used to create objects (To access an abstract class, it must be inherited from another class. You will learn more about inheritance and abstraction in the Inheritance and Abstraction chapters)	
For attributes and methods, you can use the one of the following:
-------------------------------------------------------------
Modifier    |	Description
final	    |Attributes and methods cannot be overridden/modified
static	    |Attributes and methods belongs to the class, rather than an object
abstract    |	Can only be used in an abstract class, and can only be used on methods. The method does not have a body, for example abstract void run();. The body is provided by the subclass (inherited from). You will learn more about inheritance and abstraction in the Inheritance and Abstraction chapters
transient   |	Attributes and methods are skipped when serializing the object containing them
synchronized|	Methods can only be accessed by one thread at a time
volatile    |	The value of an attribute is not cached thread-locally, and is always read from the "main memory"










Examples:
<Abstract class:>
===================================================================================================================|
Abstract
An abstract method belongs to an abstract class, and it does not have a body. The body is provided by the subclass:

Example:
// Code from filename: Person.java
// abstract class
abstract class Person {
  public String fname = "John";
  public int age = 24;
  public abstract void study(); // abstract method
}

// Subclass (inherit from Person)
class Student extends Person {
  public int graduationYear = 2018;
  public void study() { // the body of the abstract method is provided here
    System.out.println("Studying all day long");
  }
}
// End code from filename: Person.java

// Code from filename: MyClass.java
class MyClass {
  public static void main(String[] args) {
    // create an object of the Student class (which inherits attributes and methods from Person)
    Student myObj = new Student();

    System.out.println("Name: " + myObj.fname);
    System.out.println("Age: " + myObj.age);
    System.out.println("Graduation Year: " + myObj.graduationYear);
    myObj.study(); // call abstract method
  }
}
===================================================================================================================|

===================================================================================================================|
Packages:
refer: https://www.w3schools.com/java/java_packages.asp

To use a class or a package from the library, you need to use the import keyword:

Syntax:
  import package.name.Class;   // Import a single class
  import package.name.*;   // Import the whole package


User-defined Packages:

  To create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer:

  Example:
  └── root
    └── mypack
      └── MyPackageClass.java

To create a package, use the package keyword:
package mypack;
class MyPackageClass {
  public static void main(String[] args) {
    System.out.println("This is my package!");
  }
}

C:\Users\Your Name>javac MyPackageClass.java//make a class file.

Then compile the package:

C:\Users\Your Name>javac -d . MyPackageClass.java

This forces the compiler to create the "mypack" package.

The -d keyword specifies the destination for where to save the class file. You can use any directory name, like c:/user (windows), or, if you want to keep the package within the same directory, you can use the dot sign ".", like in the example above.

Note: The package name should be written in lower case to avoid conflict with class names.
Note: The package should be compiled again if there were changes done to the file.
===================================================================================================================|


Inheritance in Java;
reference : https://www.w3schools.com/java/java_inheritance.asp


-->subclass (child) - the class that inherits from another class.
-->superclass (parent) - the class being inherited from.

If you don't want other classes to inherit from a class, use the final keyword.

final Class Name{
  //cannot be used as parent class
}
Polymorphism:
https://www.w3schools.com/java/java_polymorphism.asp

Why And When To Use "Inheritance" and "Polymorphism"?
- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.
